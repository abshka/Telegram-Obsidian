import asyncio
import logging
import os
from pathlib import Path
from typing import Optional

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold, hcode, hitalic

from ..config import ALLOWED_USER_IDS, DEFAULT_ARCHIVE_NAME_PREFIX
from ..services.archiver import create_archive_from_directory

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
from ..services.exporter_service import ExporterService

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
class ExportStates(StatesGroup):
    waiting_for_method = State()     # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞: –Ω–µ–¥–∞–≤–Ω–∏–µ —á–∞—Ç—ã –∏–ª–∏ –≤–≤–æ–¥ ID
    waiting_for_id = State()         # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ ID –≤—Ä—É—á–Ω—É—é
    waiting_for_selection = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö —á–∞—Ç–æ–≤
    exporting = State()              # –≠–∫—Å–ø–æ—Ä—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    archiving = State()              # –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    sending = State()                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ExporterService –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
# –∏ –ø–µ—Ä–µ–¥–∞–Ω —Å—é–¥–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä 'exporter_service' –≤ aiogram.Router.message.middleware
# —Å–º. bot/main.py –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
exporter_service = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_authorized(user_id: int) -> bool:
    return user_id in ALLOWED_USER_IDS

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ExporterService
def register_exporter_service(service: ExporterService):
    global exporter_service
    exporter_service = service
    logger.info("ExporterService registered with export_handlers")

# –ö–æ–º–∞–Ω–¥–∞ /export - –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
@router.message(Command("export"))
async def cmd_export(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_authorized(user_id):
        logger.warning(f"Unauthorized access attempt to /export by user ID: {user_id}")
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ExporterService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if not exporter_service:
        logger.error("ExporterService not initialized for export handlers")
        await message.answer("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="–í—ã–±—Ä–∞—Ç—å –∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö —á–∞—Ç–æ–≤", callback_data="export_method:recent")
    builder.button(text="–í–≤–µ—Å—Ç–∏ ID –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞", callback_data="export_method:input_id")
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —á–∞—Ç/–∫–∞–Ω–∞–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=builder.as_markup()
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞
    await state.set_state(ExportStates.waiting_for_method)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
@router.callback_query(ExportStates.waiting_for_method, F.data.startswith("export_method:"))
async def process_export_method_selection(callback: CallbackQuery, state: FSMContext):
    method = callback.data.split(":", 1)[1]

    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É CallbackQuery

    if method == "recent":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö —á–∞—Ç–æ–≤
        await show_recent_dialogs(callback.message, state)
    elif method == "input_id":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.\n"
            "–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890.\n\n"
            "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å username –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @, –Ω–∞–ø—Ä–∏–º–µ—Ä: durov"
        )
        await state.set_state(ExportStates.waiting_for_id)
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥, –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä
        await callback.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /export.")
        await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö —á–∞—Ç–æ–≤
async def show_recent_dialogs(message: Message, state: FSMContext):
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö —á–∞—Ç–æ–≤...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ ExporterService
        dialogs = await exporter_service.get_recent_dialogs(limit=20)

        if not dialogs:
            await loading_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö —á–∞—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –≤—Ä—É—á–Ω—É—é.")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(dialogs=dialogs)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤
        builder = InlineKeyboardBuilder()

        for dialog in dialogs:
            # –°–æ–∑–¥–∞–µ–º callback_data —Å ID —á–∞—Ç–∞ –∏ —Ç–∏–ø–æ–º
            dialog_type = dialog['type']
            dialog_id = dialog['id']
            dialog_title = dialog['title']

            # –û–±—Ä–µ–∂–µ–º title –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω–µ–µ
            display_title = dialog_title[:30] + "..." if len(dialog_title) > 30 else dialog_title

            # –î–æ–±–∞–≤–∏–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            emoji = "üì¢ " if dialog_type == "channel" else "üë• " if dialog_type == "group" else "üë§ "

            builder.button(
                text=f"{emoji}{display_title}",
                callback_data=f"export_dialog:{dialog_id}:{dialog_type}:{dialog_title}"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="export_cancel")

        # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        builder.adjust(1)

        await loading_msg.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö:",
            reply_markup=builder.as_markup()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
        await state.set_state(ExportStates.waiting_for_selection)

    except Exception as e:
        logger.error(f"Error showing recent dialogs: {e}", exc_info=True)
        await loading_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {str(e)[:100]}...")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –≤—Ä—É—á–Ω—É—é
@router.message(ExportStates.waiting_for_id)
async def process_input_id(message: Message, state: FSMContext):
    target_id = message.text.strip()

    if not target_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º.")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞
    await start_export_process(message, state, target_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö
@router.callback_query(ExportStates.waiting_for_selection, F.data.startswith("export_dialog:"))
async def process_dialog_selection(callback: CallbackQuery, state: FSMContext):
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = callback.data.split(":", 3)
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    dialog_id = parts[1]
    dialog_type = parts[2]
    dialog_title = parts[3] if len(parts) > 3 else f"ID: {dialog_id}"

    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É CallbackQuery

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞
    await start_export_process(callback.message, state, dialog_id, dialog_title, dialog_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
@router.callback_query(F.data == "export_cancel")
async def process_export_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")
    await callback.message.edit_text("–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /export, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    await state.clear()

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
async def start_export_process(
    message: Message,
    state: FSMContext,
    target_id: str,
    target_name: Optional[str] = None,
    target_type: Optional[str] = "unknown"
):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
    await state.set_state(ExportStates.exporting)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
    if target_name:
        status_msg = await message.answer(f"–ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç {target_type} {hbold(target_name)}...")
    else:

        status_msg = await message.answer(f"–ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è ID/username {hbold(target_id)}...")

    try:
        # –í—ã–∑—ã–≤–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ ExporterService
        export_path = await exporter_service.trigger_export_for_target(
            target_id=target_id,
            target_name=target_name,
            target_type=target_type
        )

        if not export_path:
            await status_msg.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è {hbold(target_name or target_id)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
            await state.clear()
            return

        await status_msg.edit_text(f"–≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è {hbold(target_name or target_id)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞...")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        await state.set_state(ExportStates.archiving)
        await state.update_data(export_path=export_path, target_name=target_name or target_id)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        asyncio.create_task(archive_and_send(message, status_msg.message_id, state))

    except Exception as e:
        logger.error(f"Error starting export process: {e}", exc_info=True)
        await status_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)[:100]}...")
        await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def archive_and_send(message: Message, status_msg_id: int, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        export_path = data.get("export_path")
        target_name = data.get("target_name", "unknown")

        if not export_path or not os.path.exists(export_path):
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg_id,
                text=f"–û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ {hcode(export_path)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            )
            await state.clear()
            return

        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        archive_name_prefix = f"{DEFAULT_ARCHIVE_NAME_PREFIX}_{Path(export_path).name}"

        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=status_msg_id,
            text=f"–°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤ –¥–ª—è {hbold(target_name)}... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )

        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        archive_paths = await asyncio.to_thread(
            create_archive_from_directory,
            export_path,
            archive_name_prefix
        )

        if not archive_paths:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg_id,
                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –¥–ª—è {hbold(target_name)}. –í–æ–∑–º–æ–∂–Ω–æ, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
            )
            await state.clear()
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
        await state.set_state(ExportStates.sending)

        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–∞—Å—Ç–µ–π –∞—Ä—Ö–∏–≤–∞
        total_parts = len(archive_paths)
        if total_parts == 1:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg_id,
                text=f"–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—Ä—Ö–∏–≤ –¥–ª—è {hbold(target_name)}..."
            )
        else:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg_id,
                text=f"–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—Ä—Ö–∏–≤ –¥–ª—è {hbold(target_name)} –≤ {total_parts} —á–∞—Å—Ç—è—Ö..."
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤—ã
        for i, archive_path in enumerate(archive_paths, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if not os.path.exists(archive_path) or os.path.getsize(archive_path) == 0:
                logger.error(f"Archive file {archive_path} does not exist or is empty.")
                continue

            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
            if total_parts > 1:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=status_msg_id,
                    text=f"–û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏ {i}/{total_parts} –∞—Ä—Ö–∏–≤–∞ –¥–ª—è {hbold(target_name)}..."
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            try:
                # –°–æ–∑–¥–∞–µ–º FSInputFile –∏–∑ –ø—É—Ç–∏ –∫ –∞—Ä—Ö–∏–≤—É
                file = FSInputFile(archive_path)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                await message.bot.send_document(
                    chat_id=message.chat.id,
                    document=file,
                    caption=f"–ê—Ä—Ö–∏–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞ {hbold(target_name)}" + (f" (—á–∞—Å—Ç—å {i}/{total_parts})" if total_parts > 1 else "")
                )

            except Exception as e:
                logger.error(f"Error sending archive {archive_path}: {e}", exc_info=True)
                await message.bot.send_message(
                    chat_id=message.chat.id,
                    text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—Ä—Ö–∏–≤–∞ {Path(archive_path).name}: {str(e)[:100]}..."
                )

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=status_msg_id,
            text=f"–≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è {hbold(target_name)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω." +
                 (f" ({total_parts} –∞—Ä—Ö–∏–≤–æ–≤)" if total_parts > 1 else "")
        )

    except Exception as e:
        logger.error(f"Error in archive_and_send: {e}", exc_info=True)
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)[:100]}..."
        )
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer("–¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /export, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
@router.message(ExportStates.waiting_for_method)
@router.message(ExportStates.waiting_for_selection)
@router.message(ExportStates.exporting)
@router.message(ExportStates.archiving)
@router.message(ExportStates.sending)
async def process_unknown_state_input(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state == ExportStates.waiting_for_method.state:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
    elif current_state == ExportStates.waiting_for_selection.state:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
    elif current_state in [ExportStates.exporting.state, ExportStates.archiving.state, ExportStates.sending.state]:
        await message.answer(
            f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å {hitalic('—ç–∫—Å–ø–æ—Ä—Ç–∞/–∞—Ä—Ö–∏–≤–∞—Ü–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–∏')}. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
    else:
        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /export, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
